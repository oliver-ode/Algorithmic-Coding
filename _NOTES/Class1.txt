Feb 12 2020 - CCC
5 weeks

Topics: Graph Theory (2 weeks), Dynamic Programming (2 weeks), Data Structure (1 week)


DP is used for solving optimization problems
DP refers back to previous data to be used in future calculations
(1) Create table / DP state
(2) Transition - using the data in a new calculation
1. Characterize the structure of an optimal solution
2. Recursively define the value of an optimal solution
3. Compute the value of an optimal solution in a bottom-up fashion

[To be DP]
  - Optimal substructure
  - Overlapping solutions

[DP problems]
0-1 knapsack
  - Get as much value as you can into the knapsack
    - n items
    - Item i is worth v, weighs w
    - Find highest value with weight < W
  - Solution
    - dp[i][w] - i is item and w is weight capacity
    - dp[i][0] = 0
    - dp[0][w] = 0
    - max(vi + c[i-1, w-wi], c[i-1, w])
  - 2D array can sometimes use too much memory
    - Can use 1D array and work right to left instead
Complete knapsack
  -
Unlimited knapsack
